Git commands:
While In main: git merge <branch name>
git branch --delete/-D <branch name>
git checkout --f (DISCARDS ANY LOCAL CHANGES WHICH ARE NOT COMMITED IN ALL LOCAL BRANCHES AND THE MASTER)
git switch -c <new-branch-name> (To create a branch from a remote branch that isnt yet merged)
git push -u origin <local-branch> (creates a remote and tells the remote to track your local branch)
git branch --track <new-branch> origin/<base-branch> (Creating a branch on the basis of a remote one )
git reset --hard (Resets all local changes that haven't been commited)
git stash <save> <"message"> (To stash your changes temporarily, so as to checkout)
git stash list
git stash apply | pop OR git apply (Pop removes )
git reset --hard <previous commit>
git reset --merge <previous commit>
NOTE: Here is the take-away with the --hard and --merge flags while using them to undo a merge:
the --hard flag removes uncommitted changes, while the --merge flag keeps uncommitted changes.

Flask commands:
export FLASK_APP=app.py ("FLASK_APP" is a system variable and it Stores our app somwhere in memory)
export FLASK_DEBUG=1 (Turns on debug mode)
flask run

Using sass in CSS:
sass <name>.scss <name>.css (Basically compiles the sass code into css)
sass --watch <name>.scss:<name>.css
NOTE: SASS makes use of nesting and inheritance

CS50 HTML VALIDATION SERVICE
https://validator.w3.org/#validate_by_input

Settings:
Editor: Occurrences Highlight

echo "This Repository contains all files involved in the development of "Beepr" which includes the Static, templates and flask_session folders, app.py (python application file) and beepr.db (a database file). BeepR is a simple, userfriendly chat app developed as a final project for Havards CS50x course in 2022." > README.md

.........................User name validation...........................................
		// Validate duplicate username
		const username = document.querySelector("#username");
		const usernameErrorMessage = document.querySelector("#usernameErrorMessage");
		usernamess = JSON.parse({{usernames | tojson}});
		alert(usernamess.map(function(data){ return data.username}).join(""));
		// alert( {{ usernames | tojson }});
		username.onkeyup = function () {
			if ( {{ usernames | tojson }}.includes(username.value)){
				username.style.borderColor = "ff9494";
				username.style.boxShadow = "0 0 0 0.2rem rgba(255, 148, 148, 1)";
				usernameErrorMessage.innerHTML = "Username already exists!";
				usernameErrorMessage.style.display = "flex";
				usernameValidated = false;
			}
			else {
				username.style.borderColor = "lightgray";
				usernameErrorMessage.style.display = "none";
				username.style.boxShadow = "none";
				usernameValidated = true;
			}
		}
....................................................BeepR Tables.................................................................

CREATE TABLE users (
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	name TEXT,
	username TEXT UNIQUE,
	email TEXT UNIQUE,
	phone_number TEXT UNIQUE
	password_hash TEXT,
	bio TEXT DEFAULT "empty",
);

CREATE TABLE friends (
	user_id INTEGER NOT NULL,
	friends_id INTEGER NOT NULL,
	FOREIGN KEY(user_id) REFERENCES users(id),
	FOREIGN KEY(friends_id) REFERENCES users(id)
);

CREATE TABLE messages (
    sender_id INTEGER NOT NULL,
    receiver_id INTEGER NOT NULL,
    message TEXT NOT NULL,
    server_date_time DATETIME DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY(sender_id) REFERENCES users(id),
	FOREIGN KEY(receiver_id) REFERENCES users(id)
);

.........................ROOMS APPLICATION...........................................
		// J-I-K code for joining rooms
        // If a room already exists
        // if (room_pairs.includes(user_ID + friend_id)){
        //     alert("already exists");
        //     // leaveRoom(room);
        //     joinRoom(user_ID + friend_id);
        // }
        // else if(room_pairs.includes(friend_id + user_ID)){
        //     joinRoom(friend_id + user_ID);
        // }
        // //create a new room
        // else{
        //     let newRoom = user_ID + friend_id;
        //     // if (room_pairs.includes(newRoom)){
        //     //     room_pairs.push(newRoom);
        //     // }
        //     room_pairs.push(newRoom);
        //     // leaveRoom(room);
        //     joinRoom(newRoom);
        //     createRoom(newRoom);
        //     room = newRoom;
        // }

		// Youtube code
        // let newRoom = current_chat.innerHTML;
        // if (newRoom == room){
        //     msg = `You dey this room already boss!`
        //     systemMessage(msg);
        // }
        // else {
        //     leaveRoom(room);
        //     joinRoom(newRoom);
        //     room = newRoom;
        // }

		Things to do:
		1. Index queries
		2. remove ability to send empty messages
		3. 